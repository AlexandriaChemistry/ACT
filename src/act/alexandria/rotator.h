/*
 * This source file is part of the Alexandria Chemistry Toolkit.
 *
 * Copyright (C) 2022-2024
 *
 * Developers:
 *             Mohammad Mehdi Ghahremanpour,
 *             Julian Marrades,
 *             Marie-Madeleine Walz,
 *             Paul J. van Maaren,
 *             David van der Spoel (Project leader)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA  02110-1301, USA.
 */

/*! \internal \brief
 * Implements part of the alexandria program.
 * \author David van der Spoel <david.vanderspoel@icm.uu.se>
 */

#ifndef ACT_ROTATOR_H
#define ACT_ROTATOR_H

#include <random>
#include <vector>

namespace alexandria
{

enum class RotationAlgorithm 
    { 
        Cartesian, Polar, Sobol
    };

//! \return string corresponding to algorithm
const std::string &rotalgToString(RotationAlgorithm rotalg);

class Rotator
{
private:
    //! The rotation matrix
    matrix            A_;
    //! The average matrix after many calls to rotate
    matrix            Average_;
    //! The number of matrices added
    size_t            naver_  = 0;
    //! Sobol seed, only use this for debugging
    long long int     sobolSeed_ = 0;
    //! Rotation algorithm to use
    RotationAlgorithm rotalg_ = RotationAlgorithm::Cartesian;
    //! Debug angles?
    bool              debugAngles_ = false;
    //! Statistics of angles used
    gmx_stats         alpha_, beta_, gamma_;
    //! \brief Reset the matrix to a unity matrix
    void resetMatrix();
    
    /*! \brief Do the actual rotation of input coordinates
     * \param[in] coords Input coordinates
     * \return the rotated coordinates
     */
    std::vector<gmx::RVec> rotate(const std::vector<gmx::RVec> &coords);
    
    /*! \brief Store the angles generated if requested
     * \param[in] alpha First angle, unit radians
     * \param[in] beta  Second angle
     * \param[in] gamma Third angle
     */
    void storeAngles(double alpha, double beta, double gamma);
    
    std::vector<gmx::RVec> cartesian(double                        alpha,
                                     double                        beta,
                                     double                        gamma,
                                     const std::vector<gmx::RVec> &coords);
    
    std::vector<gmx::RVec> polar(double                        phi,
                                 double                        theta,
                                 double                        gamma,
                                 const std::vector<gmx::RVec> &coords);

    /*! \brief Rotate using angles generated by a Sobol sequence
     * \param[in] coords Input coordinates 
     * \returns the rotated coordinates 
     */  
    std::vector<gmx::RVec> sobol(double                        alpha,
                                 double                        beta,
                                 double                        gamma,
                                 const std::vector<gmx::RVec> &coords);

    /*! \brief Print a histogram of an angle
     * \param[in] angle The statistics container
     * \param[in] file  The filename to print to 
     */
    void printOneAngleHisto(gmx_stats angle, const char *file);

public:
    /*! \brief Constructor setting up algorithm
     * \param[in] rotalg      The rotation algorithm string
     * \param[in] debugAngles Whether or not to print histograms of angles
     * \param[in] sobolSeed   Starting index in the Sobol sequence. Keep at 
     *                        zero except for debugging.
     */
    Rotator(const std::string &rotalg, bool debugAngles, long long int sobolSeed = 0);
    
    //! \return the rotation algorithm selected
    RotationAlgorithm rotalg() const { return rotalg_; }
    
    /*! \brief Do a (quasi) random rotation
     */
    std::vector<gmx::RVec> random(double                        r1,
                                  double                        r2,
                                  double                        r3,
                                  const std::vector<gmx::RVec> &coords);

    void checkMatrix(FILE *fp);
        
    void printAverageMatrix(FILE *fp);

    void printAngleHisto();
};

}

#endif // ACT_ROTATOR_H
