#!/usr/bin/env python3

import os, shutil, argparse, subprocess, sys, glob, struct
from subprocess import Popen, PIPE

debug = False

def get_lib_suffix() -> str:
    if 64 == struct.calcsize("P") * 8:
        return "64"
    else:
        return ""

def get_host() -> str:
    '''Utility to get a string describing the build system'''
    if "HOST" in os.environ:
        HOST = os.environ["HOST"]
    elif "SNIC_SITE" in os.environ:
        HOST = os.environ["SNIC_SITE"]
    else:
        HOST = sys.platform
    return HOST

def get_compilers(ostype: str):
    '''Utility to return the C and C++ compiler respectively'''
    if "darwin" in ostype or "mac" in ostype:
        CXX = shutil.which("clang++")
        CC  = shutil.which("clang")
    else:
        CXX = None
        for cxxtry in [ "g++", "cxx", "ccc", "gcc" ]:
            CXX = shutil.which(cxxtry)
            if CXX:
                break
        for cctry in [ "gcc", "cc" ]:
            CC  = shutil.which(cctry)
            if CC:
                break
    if not CC or not CXX:
        sys.exit("Cannot find compilers")
    return CC, CXX

def get_mpirun():
    for mrun in [ "srun", "mpirun" ]:
        mpirun = shutil.which(mrun)
        if mpirun:
            return mpirun
    return None

def get_prefix(myprefix):
    cpp  = "CMAKE_PREFIX_PATH"
    cinc = "CPLUS_INCLUDE_PATH"
    conda = "CONDA_PREFIX"
    prefix = []
    if cpp in os.environ:
        prefix = os.environ[cpp].split(":")
    elif cinc in os.environ:
        for inc in os.environ[cinc].split(":"):
            # Add the directory excluding the /include part
            prefix.append(inc[:-8])
    elif conda in os.environ:
        prefix.append(os.environ[conda])
    else:
        conda = shutil.which("conda")
        if conda and len(conda) > 10:
            prefix = [ conda[:-10] ]
    if len(prefix) == 0:
        return ""
    else:
        pp = ""
        if len(prefix[0]) > 0:
            pp = prefix[0]
        if myprefix and len(myprefix) > 0:
            pp += ";" + myprefix
        for p in range(1, len(prefix)):
            if len(pp) > 0:
                pp += ";"
            pp += prefix[p]
        return pp.lstrip(';')
    
def find_lib(prefix, libname, verbose):
    if verbose:
        print('Entering find_lib...')
        print(f'prefix: {prefix}')
        print(f'libname: {libname}')
    for pp in prefix.split(";"):
        libtry = pp+"/lib/"+libname
        if os.path.exists(libtry):
            if verbose:
                print('Leaving find_lib...')
            return libtry
    libpath = "LIBRARY_PATH"
    if libpath in os.environ:
        for pp in os.environ[libpath].split(":"):
            libtry = pp+"/"+libname
            if os.path.exists(libtry):
                return libtry
    sys.exit("Cannot find %s" % libname)

def run_command(command, flags):
    mycommand = shutil.which(command)
    if not mycommand or len(mycommand) == 0:
        sys.exit("Cannot find the '%s' program" % command)
    cmdlist = [ mycommand ] + flags.split()
    with Popen(cmdlist, stdout=PIPE, stderr=PIPE, stdin=PIPE) as p:
        output, error = p.communicate()
        with open(command+".out", "w") as outf:
            for line in output.decode('utf-8').splitlines():
                outf.write("%s\n" % line)
        with open(command+".err", "w") as outf:
            for line in error.decode('utf-8').splitlines():
                outf.write("%s\n" % line)

def check_for_openbabel(destination):
    obabel = ("%s/bin/obabel" % destination)
    if not os.path.exists(obabel):
        sys.exit("Could not build %s, check cmake.log and make.log in %s" % ( obabel, os.getcwd() ) )
    return True

def install_openbabel(anonymous, clone, destination, prefix, build_type, CXX, CC, ncores, HOST, verbose):
    # Get working directory
    pwd = os.getcwd()
    swdir = "openbabel"
    # Do we need to clone the repo?
    if not os.path.isdir(swdir):
        if clone:
            if anonymous:
                os.system("git clone https://github.com/dspoel/openbabel.git")
            else:
                os.system("git clone git@github.com:dspoel/openbabel.git")
        else:
            oblatest = "openbabel-alexandria-0.92.tar.gz"
            if verbose:
                print("Will try to fetch %s" % oblatest)
            url = "https://github.com/dspoel/openbabel/archive/refs/tags"
            os.system("curl -L %s/%s -o %s" % ( url, oblatest, oblatest ) )
            if not os.path.exists(oblatest):
                sys.exit("Could not download %s" % oblatest)
            os.system("tar xzf %s" % oblatest)
            swdir = "openbabel-" + oblatest[:-7]
        # See if we succeeded, if so let's go
        if not os.path.isdir(swdir):
            sys.exit("No directory %s. You may want to use the '-clone_OB' flag" % swdir)

    else:
        print("Will not clone or fetch openbabel again since directory %s exists." % swdir)
    os.chdir(swdir)
    
    # To to start the build
    bdir = "build"
    os.makedirs(bdir, exist_ok=True)
    if os.path.isdir(bdir):
        os.chdir(bdir)
        # Get the lib_suffix flag
        LSFLAG = ""
        if "64" == get_lib_suffix():
            LSFLAG = "-DLIB_SUFFIX=64"
        if clone:
            # Get the correct branch
            os.system("git checkout alexandria")
        # else pray that it is the correct branch
        FLAGS = ( "-DBUILD_SHARED=ON -DBUILD_GUI=OFF -DCMAKE_PREFIX_PATH=%s -DRUN_SWIG=ON -DPYTHON_BINDINGS=ON -DOPTIMIZE_NATIVE=OFF -DWITH_COORDGEN=OFF  -DWITH_MAEPARSER=OFF -DCMAKE_CXX_COMPILER=%s -DCMAKE_C_COMPILER=%s -DCMAKE_BUILD_TYPE=%s -DCMAKE_INSTALL_PREFIX=%s %s " % ( prefix, CXX, CC, build_type, destination, LSFLAG ))

        if verbose:
            print("install_openbabel cmake FLAGS: %s" % FLAGS)
        # Get rid of history, if any and run cmake and make
        if os.path.exists("CMakeCache.txt"):
            os.unlink("CMakeCache.txt")
        run_command("cmake", FLAGS + " ..")
        run_command("make", (" -j %d install" % ncores))
        
        # Check the result
        if check_for_openbabel(destination):
            print("Succesfully installed OpenBabel in %s/bin. Please add to your PATH variable" % destination)
    # Go back to where we came from
    os.chdir(pwd)
    
def install_act(args, CXX, CC, HOST, prefix):
    # Get working directory
    pwd = os.getcwd()
    swdir = "ACT"
        
    if args.clone_ACT:
        if os.path.isdir(swdir):
            print("Will not clone since directory %s exists. Will gitt pull instead" % swdir)
            os.chdir(swdir)
            run_command("git", "pull")
        else:
            if args.anonymous:
                os.system("git clone https://github.com/dspoel/ACT.git")
            else:
                os.system("git clone git@github.com:dspoel/ACT.git")
            if not os.path.isdir(swdir):
                sys.exit("No directory %s. Maybe you want to use the -clone_ACT flag" % swdir)
            os.chdir(swdir)
        os.system("git pull")
    else:
        actversion = "1.0"
        actlatest = ( "v%s.tar.gz" % actversion )
        url       = "https://github.com/AlexandriaChemistry/ACT/archive/refs/tags"
        os.system("curl -L %s/%s -o %s" % ( url, actlatest, actlatest ) )
        if not os.path.exists(actlatest):
            sys.exit("Failed to download %s" % actlatest)
        os.system("tar xzf %s" % actlatest)
        swdir = "ACT-" + actversion
        os.chdir(swdir)


    PPATH  = prefix + ";" + args.destination
        
    # Construct cmake flags
    FLAGS = (
        "-DMPIEXEC=%s "
        "-DMPIEXEC_NUMPROC_FLAG='-n' "
        "-DGMX_EXTERNAL_BLAS=OFF "
        "-DGMX_EXTERNAL_LAPACK=OFF "
        "-DGMX_X11=OFF "
        "-DBUILD_SHARED_LIBS=OFF "
        "-DGMX_OPENMP=OFF "
        "-DGMX_MPI=ON "
        "-DCMAKE_INSTALL_PREFIX=%s "
        "-DCMAKE_CXX_COMPILER=%s "
        "-DCMAKE_C_COMPILER=%s "
        "-DCMAKE_BUILD_TYPE=%s "
        "-DCMAKE_PREFIX_PATH='%s' "
        "-DGMX_BUILD_MANUAL=OFF "
        "-DGMX_COMPACT_DOXYGEN=ON "
        "-DREGRESSIONTEST_DOWNLOAD=OFF "
        "-DGMX_DEFAULT_SUFFIX=OFF"
        % ( get_mpirun(), args.destination, CXX, CC, args.build, PPATH )
    )
    if args.cln:
        FLAGS += " -DGMX_CLN=ON"

    # Make correct build directory
    bdir = "build_" + args.build
    if not args.single:
        FLAGS += " -DGMX_DOUBLE=ON"
        bdir = bdir + "_DOUBLE"
    if args.verbose:
        print("Will create %s" % bdir)
    os.makedirs(bdir, exist_ok=True)
    os.chdir(bdir)
    if args.verbose:
        print("install_act cmake FLAGS: %s in directory %s" % ( FLAGS, os.getcwd() ) )
    # Clean up old CMake stuff
    cmc = "CMakeCache.txt"
    if os.path.exists(cmc):
        os.unlink(cmc)
    # Run cmake and make!
    for ff in [ "make.err", "make.out", "cmake.out", "cmake.err" ]:
        if os.path.exists(ff):
            os.unlink(ff)
    alex = ("%s/bin/alexandria" % args.destination)
    if os.path.exists(alex):
        os.unlink(alex)
    run_command("cmake", FLAGS + " ..")
    run_command("make", (" -j %d install tests" % args.ncores))
    if not os.path.exists(alex):
        sys.exit("Could not build '%s', check cmake.* and make.* in %s" % ( alex, os.getcwd() ) )
    else:
        print("Succesfully installed ACT in %s/bin. Please source %s/bin/ACTRC to start using ACT." % ( args.destination, args.destination) )
    
    # Go back to where we came from
    os.chdir(pwd)
    
def parseArguments():
    desc='''This script will download and install the 
    Alexandria Chemistry Toolkit as well as the Alexandria branch of
    the OpenBabel software.
    '''
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("-f", "--flags",  help="Additional compilation flags",type=str, default="")
    parser.add_argument("-anon", "--anonymous",  help="If you do not have an account at gitlab.com (gromacs) or github.com (ACT, OpenBabel) select this option.", action="store_true")
    parser.add_argument("-clone_OB", "--clone_OB", help="Clone openbabel git repository", action="store_true")
    parser.add_argument("-clone_ACT", "--clone_ACT", help="Clone ACT git repository", action="store_true")
    parser.add_argument("-ncores","--ncores", help="Number of cores for compiling", type=int, default=8)
    parser.add_argument("-bt", "--build", help="Build type for cmake. Typically Release or Debug, but Profile and ASAN (Adress Sanitizer) are available as well.", type=str, default="Release")
    parser.add_argument("-single", "--single", help="Single precision build (will not work well)", action="store_true")
    parser.add_argument("-cln", "--cln", help="Use the Class Library for Numbers (optional)", action="store_true")
    parser.add_argument("-ob", "--openbabel", help="Install the correct openbabel version", action="store_true")
    parser.add_argument("-debug", "--debug", help="Print debugging information for the script", action="store_true")
    home = "HOME"
    if home in os.environ:
        dest = os.environ["HOME"]
    else:
        dest = "."
    dest += "/tools"
    parser.add_argument("-dest", "--destination", help="Where to install the software. Default: "+dest , type=str, default=dest)
    parser.add_argument("-prefix", "--prefix", help="Directory where libraries are installed, default autodetect", type=str, default=None)
    parser.add_argument("-v", "--verbose", help="Print more stuff on the terminal", action="store_true")
    
    args = parser.parse_args()
    return args

if __name__ == '__main__':
    args    = parseArguments()
    
    HOST    = get_host()
    CC, CXX = get_compilers(HOST)
    SW      = get_prefix(args.prefix)
    # Remove duplicates from SW
    SW = ';'.join(list(set(SW.split(';'))))
    debug = args.debug
    if args.verbose:
        print("HOST = %s" % HOST)
        print("CC   = %s" % CC)
        print("CXX  = %s" % CXX)
    if debug:
        print("args.prefix = %s SW = '%s'" % ( args.prefix, SW ))

    if args.openbabel or args.clone_OB:
        install_openbabel(args.anonymous, args.clone_OB, args.destination, SW,
                          args.build, CXX, CC, args.ncores, HOST, args.verbose)
    # First check whether our OB is installed where it should be
    if check_for_openbabel(args.destination):
        install_act(args, CXX, CC, HOST, SW)
