#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# This file is part of the Alexandria Chemistry Toolkit
# https://github.com/dspoel/ACT
#

import os, shutil, argparse, sys
from multiprocessing import Pool
from pathlib           import Path

# ACT python code
sys.path.insert(1, "@ACT_PYTHON_LIB_PATH@")
from actutils          import *
from mol_csv_api       import *
from molprops          import *
from read_gaussian_log import *

debug = True

def get_environ(myvar):
  if myvar in os.environ:
    return os.environ[myvar]
  else:
    sys.exit("Please set the %s environment variable" % myvar)
    
AlexandriaLib = get_environ("AlexandriaLib")
# Some code for development versions of the Alexandria Library
Liquids       = None
if "LIQUIDS" in os.environ:
  Liquids = os.environ["LIQUIDS"]

def parseArguments():
  desc='''This script will generate a molecular property (molprop) file for input to the
  Alexandria Chemistry Toolkit (ACT, see https://github.com/dspoel/ACT/wiki).
  It will read and process Gaussian output files from the Alexandria Library,
  that you can download from https://zenodo.org/record/1170597.
  Optionally, experimental data can be added to the molprop file, for this you have to
  download that database from the ACT wiki. Since the script can take quite some time
  it runs in parallel using all the available CPU cores on your computer.
  
  You will need to set an environment variable called AlexandriaLib that points
  to the directory containing the library, otherwise the script will exit with
  an error message.
  '''
  parser  = argparse.ArgumentParser(description=desc)
  alexdef = act_library_filename("alexandria.csv")
  parser.add_argument("-a",      "--alexandria",   help="Compound definition file for reading, default "+alexdef,             type=str, default=alexdef)
  defmethods = "B3LYP-aug-cc-pVTZ"
  parser.add_argument("-methods","--methods",      help="Quantum chemistry methods to include, default "+defmethods, type=str, default=defmethods)
  maxpot = 25
  parser.add_argument("-maxpot", "--maxpot",       help="Percent of the total number of electrostatic potential points, default "+str(maxpot), type=int, default=maxpot)
  sel = "selection.dat"
  parser.add_argument("-sel", "--selection",       help="Selection file determining the Train and Test data sets. Default "+sel, type=str, default=sel)
  output = "allmols.xml"
  parser.add_argument("-o", "--output",            help="Output file, default "+output, type=str, default=output)
  gentop = "ACS-pg.xml"
  parser.add_argument("-ff", "--force_field",      help="Force field input file, default "+gentop, type=str, default=gentop)
  parser.add_argument("-db", "--database",         help="Optional SQLite database containing experimental data, default none", type=str, default="")
  xmldir = "xmldir"
  parser.add_argument("-xmldir", "--xmldir",       help="Directory for molecule.xml files, leave empty to use the current directory", type=str, default=xmldir)
  parser.add_argument("-skip", "--skip_build",     help="Do not rebuild the xml files for molecules", action="store_true")
  parser.add_argument("-clean", "--clean",         help="Remove data files after use.", action="store_true")
  parser.add_argument("-basis_table", "--basisset_table", help="Table of basis set per element, will override what is in the input file", type=str, default=None)
  args = parser.parse_args()
  return args

def name_of_data_log_file(meth, molname, xmldir, sdf_ok=False):
  datafile = None
  logfile  = None
  if len(xmldir) > 0:
    datafile = ( "%s/%s-%s.xml" % ( xmldir, molname, meth ))
  else:
    datafile = ( "%s-%s.xml" % ( molname, meth ))
  alexfile = None
  if Liquids:
    alexfile = ( "%s/MOLECULES/OEP/%s/%s-3-oep.log.gz" % ( Liquids, molname, molname ) )
    if not os.path.exists(alexfile):
      alexfile = None
  if not alexfile:
    alexfile = ( "%s/compounds/%s/%s-%s.log.gz" % ( AlexandriaLib, molname, molname, meth))
  if os.path.exists(alexfile):
    logfile = alexfile

  return datafile, logfile

def get_mols(M, musthave, ahlist, output):
  mols  = []
  if ahlist:
    for m in M.mols:
      mol = M.mols[m]
      if mol.iupac in ahlist:
        filename = Path(mol.filename).stem
        mols.append(mol)
  else:
    must = get_csv_rows(musthave, 2)
    print("There are %d entries in %s" % ( len(must), musthave ))
    for www in must:
      mol = M.find_mol(www[0])
      if mol:
        filename = Path(mol.filename).stem
        mols.append(filename)
  print("There are %d molecules in %s to generate %s" % ( len(mols), musthave, output ) )
  return mols

def build_one(logfile:str, datafile:str, maxpot: int, molname:str, basisset:str, jobtype:str, symmetry_number:int, rbt:dict) -> str:
  if not os.path.exists(datafile):
    mp = read_gaussian_log(logfile, molname, basisset, rbt, False, 0)
    if mp:
      molprops = Molprops()
      molprops.open(datafile)
      mp.experiments[0].add_prop("jobtype", jobtype)
      mp.fragments[0].symmetry_number = str(symmetry_number)
      molprops.add_molecule(mp, True)
      molprops.close()
      del molprops
  if os.path.exists(datafile):
    return datafile
  else:
    return ""

def get_method_basis_jobtype(meth:str):
  if meth == "B3LYP-aug-cc-pVTZ":
    return "B3LYP", "aug-cc-pVTZ", "Opt"
  elif meth == "HF-6-311G**":
    return "HF", "6-311G**", "Opt"
  else:
    mm = meth.upper()
    return mm, mm, mm
  
def parallel_build(M, mols, methods:str, xmldir:str, maxpot:int, 
                   basisset_table, sdf_ok):
  pool      = Pool()
  results   = []
  for molname in mols:
    for meth in methods.split(";"):
      datafile, logfile = name_of_data_log_file(meth, molname, xmldir, sdf_ok)
      if None != datafile and None != logfile:
        mm, basis, jobtype = get_method_basis_jobtype(meth)
        rbt  = read_basis_table(basisset_table)
        symm = 1
        mmm  = M.find_mol(molname)
        if mmm:
          symm = mmm.symmetry_number
        if logfile and os.path.exists(logfile):
          results.append(pool.apply_async(build_one, [logfile, datafile, maxpot, molname, basis, jobtype, symm, rbt]))

  for r in results:
    try:
      ddd = r.get(timeout=1)
    except Exception as e:
      print(e)

def make_index_list(mols, block_length):
  numb_blocks = int(len(mols)/block_length) + 1
  index_list  = [ (x*block_length) for x in range(0,numb_blocks)]
  index_list.append(len(mols))
  return index_list

def run_merge(mols, block_length, methods:str, edit_mp:str, xmldir:str, gentop:str,
              database:str, maxpot, output:str, sdf_ok=False):

  index_list = make_index_list(mols, block_length)
  print("Compounds will be merged in %s blocks with a maximum of %s molecules.\nTemporary files will be deleted after merging all molecules." % ((len(index_list)-1), block_length))
  
  temp_files = ""
  for block_index in range(len(index_list)-1):
    files = ""
    for molname_index in range(index_list[block_index],index_list[block_index+1]):
      molname = mols[molname_index]
      for meth in methods.split(";"):
        datafile, logfile = name_of_data_log_file(meth, molname, xmldir, sdf_ok)
        if None != datafile and None != logfile:
          if debug:
            print("looking for %s" % datafile)
          if os.path.exists(datafile):
            files += " " + datafile
    
    if len(files.strip().split()):
      new_temp = ( "temp_%s_%s " % ( block_index, output ) )
      command = ("%s -ff %s -o %s -maxwarn 0 -mp %s" % (edit_mp, gentop, new_temp, files))
      temp_files += " " + new_temp
      print(command)
      os.system(command)

  if len(temp_files.strip().split()) > 0:
    command = ("%s -ff %s -o %s -maxwarn 0 -mp %s" % (edit_mp, gentop, output, temp_files))
    if len(database) > 0:
      command += " -db " + database
    print(command)
    os.system(command)
    os.system("rm %s" % temp_files)
  else:
    print("Did not find any input files")

def get_alexandria():
  for name in ["alexandria", "alexandria_d", "alexandria_mpi", "alexandria_mpi_d"]:
    alexandria = shutil.which(name)
    if alexandria:
      return alexandria
  return None
  
if __name__ == "__main__":
  args        = parseArguments()
  if args.clean:
    os.system("rm -f *.xml")
    exit(0)
  alexandria  = get_alexandria()
  if not alexandria:
    print("Can not find the alexandria executable. Stopping script.")
    exit(1)
  myselection   = args.selection
  selext = ".dat"
  if myselection[-4:] != selext:
    myselection += selext
  gentop  = args.force_field
  edit_mp = alexandria + " edit_mp"

  M = Molecules()
  M.read(args.alexandria, 3, False)
  mols = get_mols(M, myselection, None, args.output)
  
  if args.output[-4:] != ".xml":
    args.output = args.output + ".xml"
  if len(args.xmldir) > 0:
    os.makedirs(args.xmldir, exist_ok=True)
  maxpot = min(100, max(20, args.maxpot))
  if not args.skip_build:
    parallel_build(M, mols, args.methods, args.xmldir, maxpot,
                   args.basisset_table, False)
  
  block_length = 2000  
  run_merge(mols, block_length, args.methods, edit_mp, args.xmldir,
            gentop, args.database, maxpot, args.output)
