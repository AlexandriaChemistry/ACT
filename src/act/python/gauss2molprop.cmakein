#!/usr/bin/env python3
#
# This file is part of the Alexandria Chemistry Toolkit
# https://github.com/dspoel/ACT
#
import argparse, sys

# ACT python code
sys.path.insert(1, "@ACT_PYTHON_LIB_PATH@")
from act import (
    read_gaussian_log,
    Molprops,
)

def parseArguments():
    desc = '''This script will read a Gaussian output file from the Alexandria library
    and write an XML file for input to the Alexandria Chemistry Toolkit. For systems
    with atoms that needed a special basis set a table can be specified with the flag
    -basisset_table. The format of the file should be:
    
    Elem1 Basis1
    Elem2 Basis2
    
    For all elements not specified the default basis set will be assumed.
    '''
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("-i", "--infile", help="Gaussian log file for reading (may be gzipped)", type=str)
    outf = "test.xml"
    parser.add_argument("-o", "--outfile", help="Output xml file for writing, default "+outf, type=str, default=outf)
    molname = "chemical"
    parser.add_argument("-n", "--molname", help="Molecule name, default "+molname, type=str, default=molname)
    parser.add_argument("-basis", "--basisset", help="Basis set, will override what is in the input file", type=str, default=None)
    parser.add_argument("-basis_table", "--basisset_table", help="Table of basis set per element, will override what is in the input file", type=str, default=None)
    parser.add_argument("-v", "--verbose", help="write debug statements", action="store_true")
    parser.add_argument("-coordset", "--coordinate_set", help="Use this coordinate set out of all stored in the gaussian log file. Default 0 which means the last one.", type=int, default=0)
    return parser.parse_args()

if __name__ == '__main__':
    args  = parseArguments()
    if not args.basisset:
        sys.exit("Please add the -basis flag")
    rbt   = read_basis_table(args.basisset_table)
    mp = read_gaussian_log(args.infile, args.molname, args.basisset, rbt,
                           args.verbose, args.coordinate_set)
    if None != mp:
        if args.verbose:
            set_molprops_debug(True)
        molprops = Molprops()
        molprops.open(args.outfile)
        molprops.add_molecule(mp, True)
        molprops.close()
        print("Wrote %s" % args.outfile)
